install.packages('shiny')
install.packages('shinythemes')
library(shiny)
library(shinythemes)
# Create Shiny object
shinyApp(ui = ui, server = server)
ui <- fluidPage(theme = shinytheme("cerulean"),
navbarPage(
# theme = "cerulean",  # <--- To use a theme, uncomment this
"My first app",
tabPanel("Navbar 1",
sidebarPanel(
tags$h3("Input:"),
textInput("txt1", "Given Name:", ""),
textInput("txt2", "Surname:", ""),
), # sidebarPanel
mainPanel(
h1("Header 1"),
h4("Output 1"),
verbatimTextOutput("txtout"),
) # mainPanel
), # Navbar 1, tabPanel
tabPanel("Navbar 2", "This panel is intentionally left blank"),
tabPanel("Navbar 3", "This panel is intentionally left blank")
) # navbarPage
) # fluidPage
# Define server function
server <- function(input, output) {
output$txtout <- renderText({
paste( input$txt1, input$txt2, sep = " " )
})
} # server
shinyApp(ui = ui, server = server)
runApp('server.r')
runApp('server.r')
library(shiny); runApp('First App.r')
library(shiny)
# UI definition
ui <- fluidPage(
titlePanel("Scatter Plot Visualizer"),
sidebarLayout(
sidebarPanel(
numericInput("num_points", "Number of Points", value = 10, min = 1, max = 100),
textInput("x_values", "Enter X values (comma-separated)", ""),
textInput("y_values", "Enter Y values (comma-separated)", ""),
actionButton("plot_button", "Plot"),
br(),
plotOutput("scatter_plot")
),
mainPanel()
)
)
# Server logic
server <- function(input, output) {
observeEvent(input$plot_button, {
x_values <- as.numeric(unlist(strsplit(input$x_values, ",")))
y_values <- as.numeric(unlist(strsplit(input$y_values, ",")))
# Check if the lengths match
if (length(x_values) != length(y_values)) {
showModal(modalDialog(
"Number of X and Y values must match!",
footer = NULL
))
return(NULL)
}
# Server logic
server <- function(input, output) {
observeEvent(input$plot_button, {
x_values <- as.numeric(unlist(strsplit(input$x_values, ",")))
y_values <- as.numeric(unlist(strsplit(input$y_values, ",")))
# Check if the lengths match
if (length(x_values) != length(y_values)) {
showModal(modalDialog(
"Number of X and Y values must match!",
footer = NULL
))
return(NULL)
}
output$scatter_plot <- renderPlot({
plot(x_values, y_values,
xlab = "X Values",
ylab = "Y Values",
main = "Scatter Plot",
col = "blue")
})
})
}
shinyApp(ui, server)
# Server logic
server <- function(input, output) {
observeEvent(input$plot_button, {
x_values <- as.numeric(unlist(strsplit(input$x_values, ",")))
y_values <- as.numeric(unlist(strsplit(input$y_values, ",")))
# Check if the lengths match
if (length(x_values) != length(y_values)) {
showModal(modalDialog(
"Number of X and Y values must match!",
footer = NULL
))
return(NULL)
}
output$scatter_plot <- renderPlot({
plot(x_values, y_values,
xlab = "X Values",
ylab = "Y Values",
main = "Scatter Plot",
col = "blue")
})
})
}
library(shiny)
# UI definition
ui <- fluidPage(
titlePanel("Scatter Plot Visualizer"),
sidebarLayout(
sidebarPanel(
numericInput("num_points", "Number of Points", value = 10, min = 1, max = 100),
textInput("x_values", "Enter X values (comma-separated)", ""),
textInput("y_values", "Enter Y values (comma-separated)", ""),
actionButton("plot_button", "Plot"),
br(),
plotOutput("scatter_plot")
),
mainPanel()
)
)
# Server logic
server <- function(input, output) {
observeEvent(input$plot_button, {
x_values <- as.numeric(unlist(strsplit(input$x_values, ",")))
y_values <- as.numeric(unlist(strsplit(input$y_values, ",")))
# Check if the lengths match
if (length(x_values) != length(y_values)) {
showModal(modalDialog(
"Number of X and Y values must match!",
footer = NULL
))
return(NULL)
}
output$scatter_plot <- renderPlot({
plot(x_values, y_values,
xlab = "X Values",
ylab = "Y Values",
main = "Scatter Plot",
col = "blue")
})
})
}
# Run the app
shinyApp(ui, server)
library(shiny); runApp('First App.r')
library(shiny); runApp('Model App.r')
install.packages(RCurl)
install.packages('RCurl')
install.packages('randomForest')
runApp('Model App.r')
install.packages('RCurl')
install.packages('RCurl')
install.packages("RCurl")
runApp('Model App.r')
